STK.register("common.editor.getLength", function($) {
    return function(str) {
        var min = 41, max = 140, surl = 20, tmp = str;
        var urls = str.match(/(http:|https:)?\/\/[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+([-A-Z0-9a-z_\$\.\+\!\*\(\)\/\,\:;@&=\?~#%]*)*/gi) || [];
        var urlCount = 0;
        for (var i = 0, len = urls.length; i < len; i++) {
            var count = $.core.str.bLength(urls[i]);
            if (/^(http:\/\/t.cn)|(https:\/\/t.cn)|(\/\/t.cn)/.test(urls[i])) {
                continue;
            } else {
                if (/^(http:\/\/|https:\/\/|\/\/)+(t.sina.com.cn|t.sina.cn)/.test(urls[i]) || /^(http:\/\/|https:\/\/|\/\/)+(weibo.com|weibo.cn)/.test(urls[i])) {
                    urlCount += count <= min ? count : count <= max ? surl : count - max + surl;
                } else {
                    urlCount += count <= max ? surl : count - max + surl;
                }
            }
            tmp = tmp.replace(urls[i], "");
        }
        var result = Math.ceil((urlCount + $.core.str.bLength(tmp)) / 2);
        return result;
    };
});;




STK.register("kit.dom.cssText", function($) {
    var _getNewCss = function(oldCss, addCss) {
        var _newCss = (oldCss + ";" + addCss).replace(/(\s*(;)\s*)|(\s*(:)\s*)/g, "$2$4"), _m;
        while (_newCss && (_m = _newCss.match(/(^|;)([\w\-]+:)([^;]*);(.*;)?\2/i))) {
            _newCss = _newCss.replace(_m[1] + _m[2] + _m[3], "");
        }
        return _newCss;
    };
    return function(oldCss) {
        oldCss = oldCss || "";
        var _styleList = [], that = {
            push: function(property, value) {
                _styleList.push(property + ":" + value);
                return that;
            },
            remove: function(property) {
                for (var i = 0; i < _styleList.length; i++) {
                    if (_styleList[i].indexOf(property + ":") == 0) {
                        _styleList.splice(i, 1);
                    }
                }
                return that;
            },
            getStyleList: function() {
                return _styleList.slice();
            },
            getCss: function() {
                return _getNewCss(oldCss, _styleList.join(";"));
            }
        };
        return that;
    };
});;


STK.register("common.listener", function($) {
    var listenerList = {};
    var that = {};
    that.define = function(sChannel, aEventList) {
        if (listenerList[sChannel] != null) {
            throw "common.listener.define: 频道已被占用";
        }
        listenerList[sChannel] = aEventList;
        var ret = {};
        ret.register = function(sEventType, fCallBack) {
            if (listenerList[sChannel] == null) {
                throw "common.listener.define: 频道未定义";
            }
            $.listener.register(sChannel, sEventType, fCallBack);
        };
        ret.fire = function(sEventType, oData) {
            if (listenerList[sChannel] == null) {
                throw "commonlistener.define: 频道未定义";
            }
            $.listener.fire(sChannel, sEventType, oData);
        };
        ret.remove = function(sEventType, fCallBack) {
            $.listener.remove(sChannel, sEventType, fCallBack);
        };
        ret.cache = function(sEventType) {
            return $.listener.cache(sChannel, sEventType);
        };
        return ret;
    };
    return that;
});;


STK.register("kit.dom.isTurnoff", function($) {
    return function(el) {
        return !(el.parentNode && el.parentNode.nodeType != 11 && !el.disabled);
    };
});;


STK.register("kit.extra.textareaUtils", function($) {
    var it = {}, ds = document.selection;
    it.selectionStart = function(oElement) {
        if (!ds) {
            try {
                return oElement.selectionStart;
            } catch (e) {
                return 0;
            }
        }
        var er = ds.createRange(), value, len, s = 0;
        var er1 = document.body.createTextRange();
        er1.moveToElementText(oElement);
        for (s; er1.compareEndPoints("StartToStart", er) < 0; s++) {
            er1.moveStart("character", 1);
        }
        return s;
    };
    it.selectionBefore = function(oElement) {
        return oElement.value.slice(0, it.selectionStart(oElement));
    };
    it.selectText = function(oElement, nStart, nEnd) {
        oElement.focus();
        if (!ds) {
            oElement.setSelectionRange(nStart, nEnd);
            return;
        }
        var c = oElement.createTextRange();
        c.collapse(1);
        c.moveStart("character", nStart);
        c.moveEnd("character", nEnd - nStart);
        c.select();
    };
    it.insertText = function(oElement, sInsertText, nStart, nLen) {
        oElement.focus();
        nLen = nLen || 0;
        if (!ds) {
            var text = oElement.value, start = nStart - nLen, end = start + sInsertText.length;
            oElement.value = text.slice(0, start) + sInsertText + text.slice(nStart, text.length);
            it.selectText(oElement, end, end);
            return;
        }
        var c = ds.createRange();
        c.moveStart("character", -nLen);
        c.text = sInsertText;
    };
    it.replaceText = function(oElement, sInsertText) {
        oElement.focus();
        var text = oElement.value;
        var selectedText = it.getSelectedText(oElement);
        var dl = selectedText.length;
        if (selectedText.length == 0) {
            it.insertText(oElement, sInsertText, it.getCursorPos(oElement));
        } else {
            var start = it.getCursorPos(oElement);
            if (ds) {
                var c = ds.createRange();
                c.text = sInsertText;
                it.setCursor(oElement, start + sInsertText.length);
            } else {
                var end = start + selectedText.length;
                oElement.value = text.slice(0, start) + sInsertText + text.slice(start + dl, text.length);
                it.setCursor(oElement, start + sInsertText.length);
                return;
            }
        }
    };
    it.getCursorPos = function(obj) {
        var CaretPos = 0;
        if (STK.core.util.browser.IE) {
            obj.focus();
            var range = null;
            range = ds.createRange();
            var stored_range = range.duplicate();
            stored_range.moveToElementText(obj);
            stored_range.setEndPoint("EndToEnd", range);
            obj.selectionStart = stored_range.text.length - range.text.length;
            obj.selectionEnd = obj.selectionStart + range.text.length;
            CaretPos = obj.selectionStart;
        } else if (obj.selectionStart || obj.selectionStart == "0") {
            CaretPos = obj.selectionStart;
        }
        return CaretPos;
    };
    it.getSelectedText = function(obj) {
        var selectedText = "";
        var getSelection = function(e) {
            if (e.selectionStart != undefined && e.selectionEnd != undefined) return e.value.substring(e.selectionStart, e.selectionEnd); else return "";
        };
        if (window.getSelection) {
            selectedText = getSelection(obj);
        } else {
            selectedText = ds.createRange().text;
        }
        return selectedText;
    };
    it.setCursor = function(obj, pos, coverlen) {
        pos = pos == null ? obj.value.length : pos;
        coverlen = coverlen == null ? 0 : coverlen;
        obj.focus();
        if (obj.createTextRange) {
            var range = obj.createTextRange();
            range.move("character", pos);
            range.moveEnd("character", coverlen);
            range.select();
        } else {
            obj.setSelectionRange(pos, pos + coverlen);
        }
    };
    it.unCoverInsertText = function(obj, str, pars) {
        pars = pars == null ? {} : pars;
        pars.rcs = pars.rcs == null ? obj.value.length : pars.rcs * 1;
        pars.rccl = pars.rccl == null ? 0 : pars.rccl * 1;
        var text = obj.value, fstr = text.slice(0, pars.rcs), lstr = text.slice(pars.rcs + pars.rccl, text == "" ? 0 : text.length);
        obj.value = fstr + str + lstr;
        this.setCursor(obj, pars.rcs + (str == null ? 0 : str.length));
    };
    return it;
});;




STK.register("module.at", function($) {
    var w = window, d = document, bw = $.core.util.browser, font = "font-family:Tahoma,宋体;", selectionStart = $.kit.extra.textareaUtils.selectionStart;
    var spec;
    var clock, oldKey, oldStart, currPos;
    var encodeValue = function() {
        var hash = {
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "\\": "&#92;",
            "&": "&amp;",
            "'": "&#039;",
            "\r": "",
            "\n": "<br>",
            " ": (navigator.userAgent.match(/.+(?:ie) ([\d.]+)/i) || [ 8 ])[1] < 8 ? [ '<pre style="overflow:hidden;display:inline;', font, 'word-wrap:break-word;"> </pre>' ].join("") : [ '<span style="white-space:pre-wrap;', font, '"> </span>' ].join("")
        };
        return function(value) {
            var ret = value.replace(/(<|>|\"|\\|&|\'|\n|\r| )/g, function(h) {
                return hash[h];
            });
            return ret;
        };
    }();
    var getCss = function() {
        var cssArr = [], oldCss = spec.textEl.style.cssText, curr;
        $.foreach([ "margin", "padding", "border" ], function(h) {
            $.foreach([ "Top", "Left", "Bottom", "Right" ], function(c) {
                var key;
                if (h != "border") {
                    key = cssArr.push(h, "-", c.toLowerCase(), ":", $.getStyle(spec.textEl, h + c), ";");
                    return;
                }
                $.foreach([ "Color", "Style", "Width" ], function(e) {
                    cssArr.push(h, "-", c.toLowerCase(), "-", e.toLowerCase(), ":", $.getStyle(spec.textEl, [ h, c, e ].join("")), ";");
                });
            });
        });
        cssArr.push("font-size:" + $.getStyle(spec.textEl, "fontSize") + ";");
        return $.kit.dom.cssText([ oldCss, cssArr.join(""), font, "word-wrap: break-word;line-height: 18px;overflow-y:auto;overflow-x:hidden;outline:none;" ].join("")).getCss();
    };
    var mirror = function() {
        var list = $.builder([ '<div node-type="wrap" style="display:none;">', '<span node-type="before"></span>', '<span node-type="flag"></span>', '<span node-type="after"></span>', "</div>" ].join("")).list;
        var wrap = list["wrap"][0], flag = list["flag"][0], after = list["after"][0], before = list["before"][0], isInit = 0, clock, currentNode, cacheCssText;
        var fix = function(d) {
            if (bw.MOZ) {
                return -2;
            }
            if (bw.MOBILE && bw.SAFARI && (bw.IPAD || bw.ITOUCH || bw.IPHONE)) {
                return -2;
            }
            return 0;
        };
        return {
            bind: function() {
                if (currentNode === spec.textEl) {
                    return;
                }
                currPos = $.position(spec.textEl);
                var posCss = [ "left:", currPos.l, "px;top:", currPos.t + 20, "px;" ].join("");
                currentNode = spec.textEl;
                var cssText = getCss();
                currentNode.style.cssText = cssText;
                cacheCssText = [ posCss, cssText, "position:absolute;filter:alpha(opacity=0);opacity:0;z-index:-1000;" ].join("");
                wrap.style.cssText = cacheCssText;
                if (!isInit) {
                    isInit = 1;
                    d.body.appendChild(wrap);
                }
            },
            content: function(sBefore, sFlag, sKey, sAfter) {
                wrap.style.cssText = [ cacheCssText, "width:", (currentNode.offsetWidth || parseInt($.getStyle(currentNode, "width"))) + fix(), "px;height:", currentNode.offsetHeight || parseInt($.getStyle(currentNode, "height")), "px;overflow-x:hidden;overflow-y:", /webkit/i.test(navigator.userAgent) ? "hidden" : $.getStyle(currentNode, "overflowY"), ";" ].join("");
                before.innerHTML = encodeValue(sBefore);
                flag.innerHTML = encodeValue(sFlag) || "&thinsp;";
                after.innerHTML = encodeValue([ sKey, sAfter ].join(""));
                clearTimeout(clock);
                clock = setTimeout(function() {
                    var pos = $.position(flag);
                    $.custEvent.fire(spec.eId, "at", {
                        t: pos.t - currentNode.scrollTop - currPos.t + 5,
                        l: pos.l - currPos.l + 5,
                        key: sKey,
                        flag: sFlag,
                        textarea: spec.textEl
                    });
                }, 30);
            },
            hide: function() {
                wrap.style.display = "none";
            },
            show: function() {
                wrap.style.display = "";
            }
        };
    }();
    var checkValue = function() {
        if ($.kit.dom.isTurnoff(spec.textEl)) {
            clearInterval(clock);
            return;
        }
        var currValue = spec.textEl.value.replace(/\r/g, "");
        var start = selectionStart(spec.textEl);
        if (start < 0 || start == oldStart) {
            return;
        }
        oldStart = start;
        var before = currValue.slice(0, start);
        var key = before.match(new RegExp([ "(", spec["flag"], ")([a-zA-Z0-9一-龥_]{0,20})$" ].join("")));
        if (!key) {
            $.custEvent.fire(spec.eId, "hidden");
            return;
        }
        var after = currValue.slice(start);
        before = before.slice(0, -key[0].length);
        mirror.content(before, key[1], key[2], after);
    };
    return function(conf) {
        if (!conf || !conf["textEl"]) {
            return;
        }
        conf = $.parseParam({
            textEl: null,
            flag: "@",
            eId: $.custEvent.define({}, [ "at", "hidden" ])
        }, conf);
        var gc = function() {
            if (!spec) {
                return;
            }
            clearInterval(clock);
            $.removeEvent(spec.textEl, "blur", gc);
            mirror.hide();
        };
        var focus = function() {
            gc();
            spec = conf;
            oldStart = null;
            mirror.bind();
            mirror.show();
            clock = setInterval(checkValue, 200);
            $.addEvent(conf.textEl, "blur", gc);
        };
        $.addEvent(conf.textEl, "focus", focus);
        return conf["eId"];
    };
});;


STK.register("kit.extra.merge", function($) {
    return function(a, b) {
        var buf = {};
        for (var k in a) {
            buf[k] = a[k];
        }
        for (var k in b) {
            buf[k] = b[k];
        }
        return buf;
    };
});;




STK.register("core.str.trim", function($) {
    return function(str) {
        if (typeof str !== "string") {
            throw "trim need a string as parameter";
        }
        var len = str.length;
        var s = 0;
        var reg = /(\u3000|\s|\t|\u00A0)/;
        while (s < len) {
            if (!reg.test(str.charAt(s))) {
                break;
            }
            s += 1;
        }
        while (len > s) {
            if (!reg.test(str.charAt(len - 1))) {
                break;
            }
            len -= 1;
        }
        return str.slice(s, len);
    };
});;


STK.register("core.json.jsonToQuery", function($) {
    var _fdata = function(data, isEncode) {
        data = data == null ? "" : data;
        data = $.core.str.trim(data.toString());
        if (isEncode) {
            return encodeURIComponent(data);
        } else {
            return data;
        }
    };
    return function(JSON, isEncode) {
        var _Qstring = [];
        if (typeof JSON == "object") {
            for (var k in JSON) {
                if (k === "$nullName") {
                    _Qstring = _Qstring.concat(JSON[k]);
                    continue;
                }
                if (JSON[k] instanceof Array) {
                    for (var i = 0, len = JSON[k].length; i < len; i++) {
                        _Qstring.push(k + "=" + _fdata(JSON[k][i], isEncode));
                    }
                } else {
                    if (typeof JSON[k] != "function") {
                        _Qstring.push(k + "=" + _fdata(JSON[k], isEncode));
                    }
                }
            }
        }
        if (_Qstring.length) {
            return _Qstring.join("&");
        } else {
            return "";
        }
    };
});;


STK.register("common.log.monitor", function($) {
    var protocol = window.location.protocol == "https:" ? "https:" : "http:";
    var MONITOR_URL = protocol + "//www.weibojs.com/log/widget.php";
    var monItem = {
        refer: document.referrer,
        title: document.title,
        ua: window.navigator.userAgent,
        os: window.navigator.platform + "|" + window.navigator.oscpu
    };
    var isMonitor = true;
    var sendRequest = function(src) {
        var img = new Image;
        if (isMonitor) {
            img.src = src;
        } else {}
        img = null;
    };
    return function(spec) {
        var that = {};
        var args = $.kit.extra.merge(monItem, spec);
        var params = [];
        for (var k in args) {
            var val = args[k];
            if (typeof val === "object") {
                val = $.core.json.jsonToQuery(val);
            }
            params.push(k + "=" + encodeURIComponent(val));
        }
        var url = MONITOR_URL + "?" + params.join("&");
        sendRequest(url);
        that.monitor = sendRequest;
        return that;
    };
});;


STK.register("kit.io.ajax", function($) {
    return function(args) {
        var conf, that, queue, current, lock, complete, fail;
        var monitor = function(res) {
            $.common.log.monitor({
                url: document.location.protocol + "//" + document.location.hostname + (conf["url"].charAt(0) == "/" ? conf["url"] : "/" + conf["url"]),
                param: conf["args"],
                method: conf["method"],
                result: res && (res.code || 0),
                httpcode: current.status
            });
        };
        complete = function(res) {
            lock = false;
            args.onComplete(res, conf["args"]);
            setTimeout(nextRequest, 0);
        };
        fail = function(res) {
            lock = false;
            args.onFail && args.onFail(res, conf["args"]);
            monitor(res);
            setTimeout(nextRequest, 0);
        };
        queue = [];
        current = null;
        lock = false;
        conf = $.parseParam({
            url: "",
            method: "get",
            responseType: "json",
            timeout: 30 * 1e3,
            onTraning: $.funcEmpty,
            isEncode: true
        }, args);
        conf["onComplete"] = complete;
        conf["onFail"] = fail;
        var nextRequest = function() {
            if (!queue.length) {
                return;
            }
            if (lock === true) {
                return;
            }
            lock = true;
            conf.args = queue.shift();
            current = $.ajax(conf);
        };
        var abort = function(params) {
            while (queue.length) {
                queue.shift();
            }
            lock = false;
            if (current) {
                try {
                    current.abort();
                } catch (exp) {}
            }
            current = null;
        };
        that = {};
        that.request = function(params) {
            if (!params) {
                params = {};
            }
            if (args["noQueue"]) {
                abort();
            }
            if (!args["uniqueRequest"] || !current) {
                queue.push(params);
                params["_t"] = 0;
                nextRequest();
            }
        };
        that.abort = abort;
        return that;
    };
});;




STK.register("kit.io.jsonp", function($) {
    return function(args) {
        var conf, that, queue, current, lock;
        conf = $.parseParam({
            url: "",
            method: "get",
            responseType: "json",
            varkey: "_v",
            timeout: 30 * 1e3,
            onComplete: $.funcEmpty,
            onTraning: $.funcEmpty,
            onFail: $.funcEmpty,
            isEncode: true
        }, args);
        queue = [];
        current = {};
        lock = false;
        var nextRequest = function() {
            if (!queue.length) {
                return;
            }
            if (lock === true) {
                return;
            }
            lock = true;
            current.args = queue.shift();
            current.onComplete = function(res) {
                lock = false;
                conf.onComplete(res, current["args"]);
                setTimeout(nextRequest, 0);
            };
            current.onFail = function(res) {
                lock = false;
                conf.onFail(res);
                setTimeout(nextRequest, 0);
            };
            $.jsonp($.kit.extra.merge(conf, {
                args: current.args,
                onComplete: function(res) {
                    current.onComplete(res);
                },
                onFail: function(res) {
                    try {
                        current.onFail(res);
                    } catch (exp) {}
                }
            }));
        };
        that = {};
        that.request = function(params) {
            if (!params) {
                params = {};
            }
            queue.push(params);
            params["_t"] = 1;
            nextRequest();
        };
        that.abort = function(params) {
            while (queue.length) {
                queue.shift();
            }
            lock = false;
            current = null;
        };
        return that;
    };
});;




STK.register("kit.io.inter", function($) {
    return function() {
        var that, argsList, hookList;
        that = {};
        argsList = {};
        hookList = {};
        that.register = function(name, args) {
            if (argsList[name] !== undefined) {
                throw name + " interface has been registered";
            }
            argsList[name] = args;
            hookList[name] = {};
        };
        that.hookComplete = function(name, func) {
            var key = $.core.util.getUniqueKey();
            hookList[name][key] = func;
            return key;
        };
        that.removeHook = function(name, key) {
            if (hookList[name] && hookList[name][key]) {
                delete hookList[name][key];
            }
        };
        that.getTrans = function(name, spec) {
            var conf = $.kit.extra.merge(argsList[name], spec);
            conf.onComplete = function(req, params) {
                try {
                    spec.onComplete(req, params);
                } catch (exp) {}
                if (req["code"] === "100000") {
                    try {
                        spec.onSuccess(req, params);
                    } catch (exp) {}
                } else {
                    try {
                        spec.onError(req, params);
                    } catch (exp) {}
                }
                for (var k in hookList[name]) {
                    try {
                        hookList[name][k](req, params);
                    } catch (exp) {}
                }
            };
            if (argsList[name]["requestMode"] === "jsonp") {
                return $.kit.io.jsonp(conf);
            } else if (argsList[name]["requestMode"] === "ijax") {
                return $.kit.io.ijax(conf);
            } else {
                return $.kit.io.ajax(conf);
            }
        };
        that.request = function(name, spec, args) {
            var conf = $.core.json.merge(argsList[name], spec);
            conf.onComplete = function(req, params) {
                try {
                    spec.onComplete(req, params);
                } catch (exp) {}
                if (req["code"] === "100000") {
                    try {
                        spec.onSuccess(req, params);
                    } catch (exp) {}
                } else {
                    try {
                        if (req["code"] === "100002") {
                            window.location.href = req["data"];
                            return;
                        }
                        spec.onError(req, params);
                    } catch (exp) {}
                }
                for (var k in hookList[name]) {
                    try {
                        hookList[name][k](req, params);
                    } catch (exp) {}
                }
            };
            conf = $.core.obj.cut(conf, [ "noqueue" ]);
            conf.args = args;
            if (argsList[name]["requestMode"] === "jsonp") {
                return $.jsonp(conf);
            } else if (argsList[name]["requestMode"] === "ijax") {
                return $.ijax(conf);
            } else {
                return $.ajax(conf);
            }
        };
        return that;
    };
});;


STK.register("common.trans.editor", function($) {
    var path = location.host == "widget.weibo.com" || location.host == "dev.weibo.com" ? "" : "/widget";
    var t = $.kit.io.inter();
    var g = t.register;
    g("face", {
        url: path + "/public/aj_getemotions.php"
    });
    g("at", {
        url: path + "/public/aj_atusers.php"
    });
    return t;
});;


STK.register("module.suggest", function($) {
    var n = null, ce = $.custEvent, define = ce.define, fire = ce.fire, add = ce.add, adEvent = $.addEvent, rmEvent = $.removeEvent, stEvent = $.stopEvent;
    var valid = [], cache = {};
    var KEY_ASSETS = {
        ENTER: 13,
        ESC: 27,
        UP: 38,
        DOWN: 40,
        TAB: 9
    };
    var suggest = function(conf) {
        var index = -1, data = [], textNode = conf["textNode"], uiNode = conf["uiNode"];
        var dEvt = $.core.evt.delegatedEvent(uiNode);
        var cEvt = define(textNode, [ "open", "close", "indexChange", "onSelect", "onIndexChange", "onClose", "onOpen", "openSetFlag" ]);
        cEvt.setFlag = setFlag;
        var setFlag = function(flag) {
            conf.flag = flag;
        };
        var items = function() {
            return $.sizzle([ "[action-type=", conf["actionType"], "]" ].join(""), uiNode);
        };
        var destroy = function() {
            index = -1;
            rmEvent(textNode, "keydown", keyHandler);
            dEvt.destroy();
        };
        var keyHandler = function(event) {
            var e, k;
            if (!(e = event) || !(k = e.keyCode)) {
                return;
            }
            if (k == KEY_ASSETS["ENTER"]) {
                stEvent();
                fire(cEvt, "onSelect", [ index, textNode, conf.flag ]);
                return false;
            }
            if (k == KEY_ASSETS["UP"]) {
                stEvent();
                var l = items().length;
                index = index < 1 ? l - 1 : index - 1;
                fire(cEvt, "onIndexChange", [ index ]);
                return false;
            }
            if (k == KEY_ASSETS["DOWN"]) {
                stEvent();
                var l = items().length;
                index = index == l - 1 ? 0 : index + 1;
                fire(cEvt, "onIndexChange", [ index ]);
                return false;
            }
            if (k == KEY_ASSETS["ESC"]) {
                stEvent();
                destroy();
                fire(cEvt, "onClose");
                return false;
            }
            if (k == KEY_ASSETS["TAB"]) {
                destroy();
                fire(cEvt, "onClose");
                return false;
            }
        };
        var clickHandler = function(event) {
            fire(cEvt, "onSelect", [ $.core.arr.indexOf(event.el, items()), textNode, conf["flag"] ]);
        };
        var overHandler = function(event) {
            index = $.core.arr.indexOf(event.el, items());
            fire(cEvt, "onIndexChange", [ $.core.arr.indexOf(event.el, items()) ]);
        };
        add(cEvt, "open", function(evt, textarea) {
            textNode = textarea;
            destroy();
            adEvent(textarea, "keydown", keyHandler);
            dEvt.add(conf["actionType"], "mouseover", overHandler);
            dEvt.add(conf["actionType"], "click", clickHandler);
            fire(cEvt, "onOpen", [ conf.flag ]);
        });
        add(cEvt, "openSetFlag", function(evt, flag) {
            setFlag(flag);
        });
        add(cEvt, "close", function() {
            destroy();
            fire(cEvt, "onClose", [ conf.flag ]);
        });
        add(cEvt, "indexChange", function(evt, iIndex) {
            index = iIndex;
            fire(cEvt, "onIndexChange", [ index, conf.flag ]);
        });
        return cEvt;
    };
    var getIns = function(conf) {
        var node = conf["textNode"];
        var id = $.core.arr.indexOf(node, valid);
        if (!cache[id]) {
            valid[id = valid.length] = node;
            cache[id] = suggest(conf);
        }
        return cache[id];
    };
    return function(conf) {
        if (!conf["textNode"] || !conf["uiNode"]) {
            return;
        }
        conf = $.parseParam({
            textNode: n,
            uiNode: n,
            actionType: "item",
            actionData: "index",
            flag: ""
        }, conf);
        return getIns(conf);
    };
});;






STK.register("common.channel.at", function($) {
    var eventList = [ "open", "close" ];
    return $.common.listener.define("common.channel.at", eventList);
});;


STK.register("kit.extra.language", function($) {
    window.$LANG || (window.$LANG = {});
    return function(temp, data) {
        var str = $.core.util.language(temp, $LANG);
        str = str.replace(/\\}/ig, "}");
        if (data) {
            str = $.templet(str, data);
        }
        return str;
    };
});;


STK.register("kit.dom.firstChild", function($) {
    var _next = $.core.dom.next;
    return function(node) {
        var _f = node.firstChild;
        if (_f && _f.nodeType != 1) {
            _f = _next(_f);
        }
        return _f;
    };
});;


STK.register("kit.dom.layoutPos", function($) {
    return function(box, el, opts) {
        if (!$.isNode(el)) {
            throw "kit.dom.layerOutElement need element as first parameter";
        }
        if (el === document.body) {
            return false;
        }
        if (!el.parentNode) {
            return false;
        }
        if (el.style.display === "none") {
            return false;
        }
        var conf, shell, pos, size, posKey, shellPos, shellAttr;
        conf = $.parseParam({
            pos: "left-bottom",
            offsetX: 0,
            offsetY: 0
        }, opts);
        shell = el;
        if (!shell) {
            return false;
        }
        while (shell !== document.body) {
            shell = shell.parentNode;
            if (shell.style.display === "none") {
                return false;
            }
            shellPos = $.getStyle(shell, "position");
            shellAttr = shell.getAttribute("layout-shell");
            if (shellPos === "absolute" || shellPos === "fixed") {
                break;
            }
            if (shellAttr === "true" && shellPos === "relative") {
                break;
            }
        }
        shell.appendChild(box);
        pos = $.position(el, {
            parent: shell
        });
        size = {
            w: el.offsetWidth,
            h: el.offsetHeight
        };
        posKey = conf["pos"].split("-");
        if (posKey[0] === "left") {
            box.style.left = pos.l + conf.offsetX + "px";
        } else if (posKey[0] === "right") {
            box.style.left = pos.l + size.w + conf.offsetX + "px";
        } else if (posKey[0] === "center") {
            box.style.left = pos.l + size.w / 2 + conf.offsetX + "px";
        }
        if (posKey[1] === "top") {
            box.style.top = pos.t + conf.offsetY + "px";
        } else if (posKey[1] === "bottom") {
            box.style.top = pos.t + size.h + conf.offsetY + "px";
        } else if (posKey[1] === "middle") {
            box.style.top = pos.t + size.h / 2 + conf.offsetY + "px";
        }
        return true;
    };
});;


STK.register("common.editor.plugin.at", function($) {
    var lang = $.kit.extra.language;
    var TEMPLATE = '<div class="WB_tips_smart WB_email">' + '<p class="tipsmt_title" node-type="suggestTitle">想用@提到谁</p>' + '<ul class="tipsmt_list" node-type="suggestWrap">' + "</ul>" + "</div>";
    var msg = {
        "@": {
            normalTitle: lang("#L{选择昵称或轻敲空格完成输入}"),
            moreTitle: lang("#L{选择最近@的人或直接输入}"),
            noTilte: lang("#L{轻敲空格完成输入}")
        },
        "#": {
            normal: lang("#L{想用什么话题？}")
        }
    };
    var items = {
        "@": "<#et temp data>" + "<#list data.data as list>" + '<li action-type="item" ' + "<#if (list_index == 0)>" + 'class="tipsmt_cur" ' + "</#if>" + 'action-data="value=${list.nickname}" value="${list.nickname}"><a href="#">${list.nickname}<#if (list.remark)>(${list.remark})</#if></a></li>' + "<#if (list.count)>" + "<span>${list.count}</span>" + "</#if>" + "</#list>" + "</#et>",
        "#": "<#et temp data>" + "<#list data.data as list>" + '<li action-type="item" ' + "<#if (list_index == 0)>" + 'class="cur" ' + "</#if>" + 'action-data="value=${list.topic}" value="${list.topic}"><a href="#">${list.topic}<#if (list.count)>(${list.count})</#if></a></li>' + "</#list>" + "</#et>"
    };
    var suggest, at, nodeList, suggestTitle, suggestWrap, sugg, key, suggFlag = false, textarea;
    var list;
    var transArray = {
        "@": "at",
        "#": "topicList"
    };
    var oldIndex = 0;
    var textElBlur = function() {
        setTimeout(function() {
            $.custEvent.fire(suggest, "close");
        }, 200);
    };
    var onClose = function() {
        sugg.style.display = "none";
    };
    var bindSuggest = function() {
        $.custEvent.add(suggest, "onIndexChange", function(event, index) {
            setIndex(index);
        });
        $.custEvent.add(suggest, "onSelect", function(event, index, textarea, flag) {
            oldIndex = 0;
            $.core.evt.stopEvent();
            var text = list[index].getAttribute("value");
            text = text.replace(/\(.*\)/, "");
            try {
                textarea.focus();
            } catch (e) {}
            var cur = $.kit.extra.textareaUtils.selectionStart(textarea) * 1;
            var reg = new RegExp(flag + "([a-zA-Z0-9一-龥_]{0,20})$");
            var l = textarea.value.replace(/\r+/g, "").slice(0, cur).match(reg);
            var backWord = textarea.value.slice(cur, cur + 1);
            l = l && l[1] ? l[1].length : 0;
            var utils = $.kit.extra.textareaUtils;
            if (flag == "#") {
                if (typeof backWord != "undefined" && backWord != flag) {
                    text = text + flag + " ";
                }
            } else {
                text = text + " ";
            }
            utils.insertText(textarea, text, cur, l);
            var cursorPos = utils.getCursorPos(textarea);
            if (flag == "#" && backWord == flag) {
                utils.setCursor(textarea, cursorPos + 1);
                utils.insertText(textarea, " ", cursorPos + 1, 0);
            }
            cursorPos = utils.getCursorPos(textarea);
            var selValue = utils.getSelectedText(textarea);
            var slen = selValue == "" || selValue == null ? 0 : selValue.length;
            textarea.setAttribute("range", cursorPos + "&" + slen);
            $.custEvent.fire(suggest, "close");
        });
        $.addEvent(nodeList.textEl, "blur", textElBlur);
        $.custEvent.add(suggest, "onClose", onClose);
        $.custEvent.add(suggest, "onOpen", function(event, index) {
            suggestWrap.style.display = "";
            sugg.style.display = "";
            suggFlag = true;
            setTimeout(function() {
                $.custEvent.fire(suggest, "indexChange", 0);
            }, 100);
        });
    };
    var getSuggestHTML = function(flag, ret, key) {
        if (flag == "@") {
            if (ret.data && ret.data.length > 0) {
                ret.title = key == "" ? msg[flag]["moreTitle"] : msg[flag]["normalTitle"];
            } else {
                ret.title = msg[flag]["noTilte"];
            }
        } else {
            ret.title = msg[flag]["normalTitle"];
        }
        var _html = $.core.util.easyTemplate(items[flag], ret);
        return _html;
    };
    var bind = function() {
        $.core.evt.custEvent.add(at, "hidden", function(type, data) {
            $.custEvent.fire(suggest, "close");
        });
        $.core.evt.custEvent.add(at, "at", function(type, data) {
            key = data.key;
            var flag = data.flag;
            if (key.length == 0 && flag != "@") {
                $.custEvent.fire(suggest, "close");
                return;
            }
            var url = document.location.host == "widget.weibo.com" ? "" : "/widget";
            $.core.io.ajax({
                url: url + "/public/aj_atusers.php",
                args: {
                    wsrc: $CONFIG.wsrc || "app_comment_box",
                    appkey: $CONFIG.source_appkey || $CONFIG.appkey || $CONFIG.app_src,
                    q: key
                },
                onComplete: function(ret) {
                    if (ret.code == "100000") {
                        var _html = getSuggestHTML(flag, ret, key);
                        $.custEvent.fire(suggest, "openSetFlag", flag);
                        $.custEvent.fire(suggest, "open", data.textarea);
                        var _node = $.core.dom.builder(_html);
                        var layerFragment = _node.box;
                        suggestWrap.innerHTML = layerFragment;
                        suggestWrap.style.display = ret.data.length == 0 ? "none" : "";
                        suggestTitle.innerHTML = key.length == 0 ? msg["@"].moreTitle : msg["@"].normalTitle;
                        sugg.style.cssText = [ "z-index:11001;background-color:#ffffff;position:absolute;" ].join("");
                        $.common.channel.at.fire("open");
                        $.kit.dom.layoutPos(sugg, data.textarea, {
                            pos: "left-top",
                            offsetX: data.l,
                            offsetY: data.t
                        });
                    } else {
                        $.custEvent.fire(suggest, "close");
                    }
                },
                onFail: function() {
                    $.custEvent.fire(suggest, "close");
                }
            });
        });
    };
    var rend = function() {
        textarea = nodeList.textEl;
        at = STK.module.at({
            textEl: textarea,
            flag: "@"
        });
    };
    var init = function(textEl) {
        oldIndex = 0;
        sugg && (sugg.style.display = "none");
        sugg && (sugg.innerHTML = "");
        var builder = $.builder(TEMPLATE);
        sugg = $.kit.dom.firstChild(builder.box);
        sugg.style.display = "none";
        document.body.appendChild(sugg);
        suggestTitle = builder.list.suggestTitle[0];
        suggestWrap = builder.list.suggestWrap[0];
        suggest && $.custEvent.fire(suggest, "close");
        suggest && $.custEvent.remove(suggest);
        suggest = $.module.suggest({
            textNode: textEl,
            uiNode: suggestWrap,
            actionType: "item",
            actionData: "value",
            flag: "@"
        });
        bindSuggest();
    };
    var setIndex = function(index) {
        list = $.sizzle("li", suggestWrap);
        list && list[0] && $.core.dom.removeClassName(list[oldIndex], "tipsmt_cur");
        $.core.dom.addClassName(list[index], "tipsmt_cur");
        oldIndex = index;
    };
    return function(editor, options) {
        nodeList = editor.nodeList;
        var that = {};
        that.init = function() {
            rend();
            init(nodeList.textEl);
            bind();
        };
        return that;
    };
});;


STK.register("common.editor.simpleEditorNew", function($) {
    var trim = $.core.str.trim, clock;
    var getLength = $.common.editor.getLength;
    var countEditor = function(str, limit) {
        var num = getLength(str);
        var onum = Math.abs(limit - num);
        var result;
        if (num > limit || num < 1) {
            result = {
                wordsnum: num,
                vnum: onum,
                overflow: true
            };
        } else if (num == 0) {
            result = {
                wordsnum: num,
                vnum: onum,
                overflow: true
            };
        } else {
            result = {
                wordsnum: num,
                vnum: onum,
                overflow: false
            };
        }
        return result;
    };
    return function(editor, opts) {
        opts = opts || {};
        var limit = opts.limit || 140;
        if (!editor) {
            throw "[easyEditor]: editor is null";
        }
        $.custEvent.define(editor, "textNum");
        $.custEvent.define(editor, "keyUpCount");
        var textE = $.sizzle('[node-type="editor"]', editor)[0];
        var wordNum = $.sizzle('[node-type="wordNum"]', editor)[0];
        if (opts.atSwitch != null && opts.atSwitch == true) {
            var at = $.common.editor.plugin.at({
                nodeList: {
                    textEl: textE
                }
            }, opts);
            at.init();
        }
        $.addEvent(textE, "focus", function() {
            clock = setInterval(function() {
                keyUpCount();
            }, 200);
        });
        $.addEvent(textE, "blur", function() {
            clock && clearInterval(clock);
        });
        var keyUpCount = function() {
            var str = trim(textE.value).length == 0 ? trim(textE.value) : textE.value;
            str = str.replace(/\r\n/g, "\n");
            var count = countEditor(str, limit);
            if (str.length >= 0 && textE.focus) {
                if (count.overflow && count.wordsnum != 0) {
                    wordNum.className = opts.warnClassName ? opts.warnClassName : "WB_tipS_numWarn";
                } else {
                    wordNum.className = opts.className ? opts.className : "WB_tipS_num";
                }
            } else if (str.length === 0) {
                wordNum.className = opts.className ? opts.className : "WB_tipS_num";
            }
            if (str.length !== 0 && count.overflow) {
                wordNum.innerHTML = "-" + (count.vnum > 100 ? "n" : count.vnum);
            } else {
                wordNum.innerHTML = count.wordsnum;
            }
            $.custEvent.fire(editor, "textNum", {
                count: count.wordsnum,
                isOver: count.overflow
            });
        };
        $.addEvent(textE, "keyup", keyUpCount);
        $.custEvent.add(editor, "keyUpCount", keyUpCount);
        keyUpCount();
    };
});;




if (typeof scope === "undefined") {
    scope = {};
}

scope.loginKit = function() {
    if (window.scope) {
        var uid = window.scope.current_user_weibo || window.scope.current_user_sina;
        if (uid) return {
            uid: uid,
            isLogin: !!uid
        };
    }
    if (window.$CONFIG) {
        var uid = window.$CONFIG.current_user_weibo || window.$CONFIG.current_user_sina || window.$CONFIG.uid || window.$CONFIG.$uid;
        if (uid) return {
            uid: uid,
            isLogin: !!uid
        };
    }
    var documentCookie = document.cookie + ";";
    var supRegExp = [ "SUP", "=([^;]*)?;" ].join("");
    var uidRegExp = [ "(\\?|&)", "uid", "=([^&]*)(&|$)" ].join("");
    var info = documentCookie.match(new RegExp(supRegExp, "i"));
    info = info ? info[1] || "" : "";
    info = unescape(info);
    var uid = info.match(new RegExp(uidRegExp));
    uid = uid ? uid[2] || "" : "";
    var oid = scope["$oid"];
    return {
        uid: uid,
        isLogin: !!uid,
        isAdmin: uid && oid && uid == oid
    };
};

scope.$isLogin = function() {
    return scope.loginKit().isLogin;
};

scope.$isAdmin = function() {
    return scope.loginKit().isAdmin;
};;


STK.register("common.editor.flashContent", function($) {
    return function($node, b, c, d) {
        b = b || [ "#fee", "#fdd", "#fcc", "#fdd", "#fee", "transparent" ];
        c = c || 2;
        d = d || 50;
        var e = 0, h = b.length, f = c * h, g = setInterval(function() {
            $node.style.backgroundColor = b[e % h];
            e++;
            e == f && clearInterval(g);
        }, d);
    };
});;




STK.register("common.trans.live", function($) {
    var t = $.kit.io.inter();
    var g = t.register;
    var weiboURL = "";
    if (location.host != "widget.weibo.com") {
        weiboURL = "/widget";
    }
    g("addmblog", {
        url: weiboURL + "/livestream/addmblog.php",
        method: "post"
    });
    g("comment", {
        url: weiboURL + "/livestream/comment.php",
        method: "post"
    });
    g("repost", {
        url: weiboURL + "/livestream/repost.php",
        method: "post"
    });
    g("oldfromsearch", {
        url: weiboURL + "/livestream/getoldfromsearch.php ",
        method: "get"
    });
    g("relations", {
        url: weiboURL + "/livestream/aj_getrelations.php",
        method: "post"
    });
    g("addFollow", {
        url: weiboURL + "/livestream/aj_attention.php",
        method: "post"
    });
    return t;
});;


STK.register("module.tabs", function($) {
    return function(node, spec) {
        var tabNode, boxNode, cbk, eType, cls, len, index;
        var opts = $.parseParam({
            evtType: "click",
            tabNode: "",
            boxNode: "",
            className: "current",
            callback: function() {},
            defaultIndex: 0
        }, spec);
        function setIndex(n) {
            if (n == index) {
                return;
            }
            var callback = $.isArray(cbk) ? cbk[n] : cbk, tNode = tabNode[n], dNode = $.isArray(boxNode) ? boxNode[n] : null;
            if (dNode) {
                $.setStyle(boxNode[index], "display", "none");
                $.setStyle(boxNode[n], "display", "");
            }
            $.removeClassName(tabNode[index], cls);
            $.addClassName(tabNode[n], cls);
            callback({
                index: n,
                tabNode: tNode,
                boxNode: dNode
            });
            index = n;
        }
        function checkParam() {
            if (!$.isArray(tabNode)) {
                throw "module.tab needs tabNode as Array!";
            }
            if (opts.boxNode !== "") {
                if (!$.isArray(boxNode)) {
                    throw "module.tab needs tabNode as Array!";
                }
                if (tabNode.length != boxNode.length) {
                    throw "module.tab needs tabNode'length equal to boxNode'length!";
                }
            }
        }
        function init(node, opts) {
            cbk = opts.callback;
            cls = opts.className;
            index = opts.defaultIndex;
            tabNode = typeof opts.tabNode == "string" ? $.sizzle(opts.tabNode, node) : opts.tabNode;
            len = tabNode.length;
            if (opts.boxNode !== "") {
                boxNode = typeof opts.boxNode == "string" ? $.sizzle(opts.boxNode, node) : opts.boxNode;
            }
            checkParam();
            for (var i = 0; i < len; i++) {
                $.addEvent(tabNode[i], opts.evtType, function(n) {
                    return function() {
                        $.preventDefault();
                        setIndex(n);
                    };
                }(i));
            }
        }
        init(node, opts);
    };
});;








STK.register("common.diy.live", function($) {
    return function($p, selector, type, callback) {
        var that = {};
        var live = function(e) {
            e = e || $.getEvent(e);
            var target = e.target || e.srcElement, lis = $.sizzle(selector, $p), len = lis.length;
            while (len--) {
                if (lis[len] == target || $.contains(lis[len], target)) {
                    callback.call(lis[len], e);
                    break;
                }
            }
        };
        var init = function() {
            bindDOM();
        };
        var bindDOM = function() {
            $.addEvent($p, type, live);
        };
        that.destroy = function() {
            $.removeEvent($p, type, live);
            $p = null;
        };
        init();
        return that;
    };
});;




STK.register("kit.dom.parseDOM", function($) {
    return function(list) {
        for (var a in list) {
            if (list[a] && list[a].length == 1) {
                list[a] = list[a][0];
            }
        }
        return list;
    };
});;








STK.register("common.editor.simpleEditor", function($) {
    var trim = $.core.str.trim, clock;
    var getLength = $.common.editor.getLength;
    var countEditor = function(str, limit) {
        var num = getLength(str);
        var onum = Math.abs(limit - num);
        var result;
        if (num > limit || num < 1) {
            result = {
                wordsnum: num,
                vnum: onum,
                overflow: true
            };
        } else if (num == 0) {
            result = {
                wordsnum: num,
                vnum: onum,
                overflow: true
            };
        } else {
            result = {
                wordsnum: num,
                vnum: onum,
                overflow: false
            };
        }
        return result;
    };
    return function(editor, opts) {
        opts = opts || {};
        var limit = opts.limit || 140;
        if (!editor) {
            throw "[easyEditor]: editor is null";
        }
        $.custEvent.define(editor, "textNum");
        $.custEvent.define(editor, "keyUpCount");
        var textE = $.sizzle('[node-type="editor"]', editor)[0];
        var wordNum = $.sizzle('[node-type="wordNum"]', editor)[0];
        if (opts.atSwitch != null && opts.atSwitch == true) {
            var at = $.common.editor.plugin.at({
                nodeList: {
                    textEl: textE
                }
            }, opts);
            at.init();
        }
        $.addEvent(textE, "focus", function() {
            clock = setInterval(function() {
                keyUpCount();
            }, 200);
        });
        $.addEvent(textE, "blur", function() {
            clock && clearInterval(clock);
        });
        var keyUpCount = function() {
            var str = trim(textE.value).length == 0 ? trim(textE.value) : textE.value;
            str = str.replace(/\r\n/g, "\n");
            var count = countEditor(str, limit);
            if (str.length >= 0 && textE.focus) {
                if (count.overflow && count.wordsnum != 0) {
                    wordNum.className = opts.warnClassName ? opts.warnClassName : "WB_tipS_numWarn";
                } else {
                    wordNum.className = opts.className ? opts.className : "WB_tipS_num";
                }
            } else if (str.length === 0) {
                wordNum.className = opts.className ? opts.className : "WB_tipS_num";
            }
            if (str.length !== 0 && count.overflow) {
                wordNum.innerHTML = "-" + (count.vnum > 100 ? "n" : count.vnum);
            } else {
                wordNum.innerHTML = count.vnum;
            }
            $.custEvent.fire(editor, "textNum", {
                count: count.wordsnum,
                isOver: count.overflow
            });
        };
        $.addEvent(textE, "keyup", keyUpCount);
        $.custEvent.add(editor, "keyUpCount", keyUpCount);
        keyUpCount();
    };
});;






STK.register("common.widget.showEditor", function($) {
    var $L = $.kit.extra.language, addEvent = $.addEvent, getLength = $.common.editor.getLength, flashContent = $.common.editor.flashContent, removeEvent = $.removeEvent;
    var args = {
        focus: true,
        type: "repost",
        template: "<#et temp data>" + '<div class="liveStream_mainFeed_list_comment" style="display:block;" node-type="outer">' + '<div class="liveStream_mainFeed_listArrow W_bgcolor_arrow" style="margin-right:47px;" node-type="arrow"><em class="liveStream_mainFeed_listArrowArrline">◆</em><span>◆</span></div>' + '<div class="liveStream_mainFeed_list_commentInput" node-type="publisher">' + '<div class="commentInput_area">' + '<textarea class="WB_textarea" node-type="editor">${data.text}</textarea>' + '<p class="commentInput_state" style="display:none;" node-type="error"><span class="WB_tipS_err commentInput_state_icon"></span><span node-type="tip_error">#L{发表微博失败}</span><a href="###" node-type="back">#L{返回}</a></p>' + '<p class="commentInput_state" style="display:none;" node-type="success"><span class="WB_tipS_ok commentInput_state_icon"></span><span node-type="tip_success">#L{发布成功}</span></p>' + "</div>" + '<div class="commentInput_action clearfix">' + '<div class="commentInput_actionRetweet">' + '<p class="commentInput_actionRe">' + '<input type="checkbox" node-type="check" id="checkIt" />' + '<label for="checkIt" node-type="more">#L{同时评论}</label>' + "</p>" + "</div>" + '<div class="commentInput_actionButton">' + '<p class="commentInput_actionSub"><a href="###" class="WB_btnA" node-type="sendBtn"><span>#L{转发}</span></a></p>' + '<p class="commentInput_actionFont"><span class="txt_num" node-type="wordNum">140</span>#L{字}</p>' + "</div>" + "</div>" + "</div>" + "</div>" + "</#et>",
        forward: "",
        uname: "",
        callback: function() {}
    };
    return function(node, opts) {
        var html, dom, nodes, that = {};
        var temp = "";
        args = $.parseParam(args, opts);
        if (node && typeof node === "string") {
            node = $.E(node);
        } else if (node.nodeType !== 1) {
            throw "[common.widget.showEditor] node.nodeType wrong!";
        }
        var spec = {
            text: ""
        };
        if (args.type === "repost") {
            args.uname = decodeURIComponent(args.uname);
            var forw = args.forward ? "//@" + args.uname + "：" + decodeURIComponent(args.forward || "") : "";
            spec.text = forw;
        }
        var reInit = function(opts) {
            args = $.parseParam(args, opts);
            if (args.type === "comment") {
                nodes.more.innerHTML = $L("#L{同时转发}");
                nodes.sendBtn.innerHTML = $L("<span>#L{评论}</span>");
                nodes.editor.value = decodeURIComponent(args.forward);
            }
        };
        var sendIt = function() {
            var content = $.trim(nodes.editor.value), len = getLength(content);
            if (len > 140 || len === 0) {
                flashContent(nodes.editor);
                return false;
            }
            var check = nodes.check.checked;
            typeof args.callback === "function" && args.callback.call(that, content, check);
        };
        var init = function() {
            parseDOM();
            bindDOM();
            show();
        };
        var show = function() {
            node.parentNode.appendChild(dom.box);
            nodes = $.kit.dom.parseDOM($.builder(node.parentNode).list);
            if (args.focus) {
                $.kit.extra.textareaUtils.setCursor(nodes.editor, 0, 0);
            }
            $.common.editor.simpleEditor(nodes.publisher, {
                warnClassName: "txt_num err_num",
                className: "txt_num"
            });
        };
        var parseDOM = function() {
            html = $.core.util.easyTemplate($L(args.template), spec).toString();
            dom = $.core.dom.builder(html);
            nodes = $.kit.dom.parseDOM(dom.list);
        };
        var bindDOM = function() {
            if (args.type === "comment") {
                nodes.more.innerHTML = $L("#L{同时转发}");
                nodes.sendBtn.innerHTML = $L("<span>#L{评论}</span>");
            }
            addEvent(nodes.back, "click", hideError);
            addEvent(nodes.sendBtn, "click", sendIt);
            $.core.evt.hotKey.add(nodes.editor, "ctrl+Enter", sendIt);
        };
        var hideError = function() {
            nodes.error.style.display = "none";
            nodes.editor.value = temp;
        };
        that.showError = function(msg) {
            if (msg) {
                nodes["tip_error"].innerHTML = msg;
            }
            nodes.error.style.display = "";
            temp = nodes.editor.value;
            nodes.editor.value = "";
            setTimeout(function() {
                nodes && (nodes.error.style.display = "none");
            }, 3e3);
        };
        that.clear = function() {
            temp = "";
            nodes.editor.value = "";
        };
        that.showSuccess = function(msg) {
            if (msg) {
                nodes["tip_success"].innerHTML = msg;
            }
            that.clear();
            nodes.success.style.display = "";
            setTimeout(function() {
                nodes && (nodes.success.style.display = "none");
            }, 3e3);
        };
        that.setArrow = function(pos) {
            nodes["arrow"].style.marginRight = pos + "px";
        };
        that.getNodes = function() {
            return nodes;
        };
        that.show = show;
        that.hide = function(dead) {
            if (!nodes) return;
            nodes.outer.style.display = "none";
            if (dead) {
                this.destroy();
            }
        };
        that.focus = function(pos) {
            $.kit.extra.textareaUtils.setCursor(nodes.editor, pos, 0);
        };
        that.destroy = function() {
            removeEvent(nodes.back, "click", hideError);
            removeEvent(nodes.sendBtn, "click", sendIt);
            $.core.evt.hotKey.remove(nodes.editor, "ctrl+Enter", sendIt);
            $.removeNode(nodes["outer"]);
            for (var i in nodes) {
                nodes[i] = null;
            }
            nodes = null;
        };
        init();
        that.reInit = reInit;
        that.pubNodes = nodes;
        return that;
    };
});;


STK.register("core.obj.parseParam", function($) {
    return function(oSource, oParams, isown) {
        var key, obj = {};
        oParams = oParams || {};
        for (key in oSource) {
            obj[key] = oSource[key];
            if (oParams[key] != null) {
                if (isown) {
                    if (oSource.hasOwnProperty[key]) {
                        obj[key] = oParams[key];
                    }
                } else {
                    obj[key] = oParams[key];
                }
            }
        }
        return obj;
    };
});;


STK.register("common.widget.log", function($) {
    var CATEGARY = {
        app_sharebutton: 1,
        app_followbutton: 2,
        app_livestream: 4,
        app_listweibo: 5,
        app_weiboshow: 6,
        app_commentbox: 7
    };
    return function(opts) {
        var conf = $.core.obj.parseParam({
            vsrc: "app_weiboshow",
            refer: "",
            step: 1
        }, opts);
        var refer = scope.refer || scope.$refer || conf["refer"], uid = scope.loginKit().uid || "", appid = scope.appkey || $CONFIG.$appkey || $CONFIG.appkey || 0, cat = CATEGARY[conf.vsrc] || "";
        var src = "//rs.sinajs.cn/r.gif?uid=" + uid + "&appid=" + appid + "&refer=" + refer + "&cat=" + cat + "&step=" + conf["step"] + "&rnd=" + +(new Date);
        var img = new Image;
        img.src = src;
        img = null;
    };
});;


STK.register("common.widget.login", function($) {
    var args = {
        vsrc: "app_weiboshow",
        appsrc: "",
        showlogo: 0,
        callback: function() {}
    };
    var protocol = window.location.protocol == "https:" ? "https:" : "http:";
    if (typeof App === "undefined") {
        App = {};
    }
    return function(opts) {
        opts = $.parseParam(args, opts);
        if (!opts.appsrc) {
            opts.appsrc = scope ? scope.appsrc ? scope.appsrc : scope.$appsrc ? scope.$appsrc : "" : "";
        }
        var that = {};
        App.loginBackUrlCallBack = function(obj) {
            $.custEvent.fire(that, "login", obj);
            opts.step = 2;
            $.common.widget.log(opts);
        };
        var init = function() {
            parseDOM();
            bindDOM();
            bindCustEvt();
            bindListener();
        };
        var parseDOM = function() {};
        var bindDOM = function() {};
        var bindCustEvt = function() {
            $.custEvent.define(that, "login");
        };
        var bindListener = function() {
            $.custEvent.add(that, "login", function(obj) {
                opts.callback(obj);
            });
        };
        that.showLogin = function() {
            var params = "&" + $.jsonToQuery(opts);
            var is360 = navigator.userAgent.indexOf("360 Aphone Browser") >= 0;
            var isWeixin = /micromessenger\/(\d+\.\d+\.\d+)/i.test(navigator.userAgent);
            if (is360 || isWeixin) {
                location.href = protocol + "//service.weibo.com/reg/loginindex.php?regbackurl=http%3A%2F%2Fweibo.com&backurl=" + encodeURIComponent(location.href) + params + "&rnd=" + +(new Date).valueOf();
                return;
            }
            var weiboURL = protocol + "//service.weibo.com/reg/loginindex.php?regbackurl=http%3A%2F%2Fweibo.com&backurl=http%3A%2F%2F" + location.host + "%2Fstaticjs%2FloginProxy.html" + params + "&rnd=" + +(new Date).valueOf();
            if (/weibo.com/.test(location.host)) {
                weiboURL = weiboURL.replace(/\/widget/, "");
            }
            var loginPopWindow = window.open(weiboURL, "miniblog_login", [ "toolbar=1,status=0,resizable=1,width=620,height=540,left=", (screen.width - 620) / 2, ",top=", (screen.height - 450) / 2 ].join(""));
            loginPopWindow.focus();
            $.common.widget.log(opts);
        };
        init();
        return that;
    };
});;


STK.register("comp.widget.live.repost_comm", function($) {
    var live = $.common.diy.live, $L = $.kit.extra.language, getLength = $.common.editor.getLength, showEditor = $.common.widget.showEditor, addEvent = $.addEvent, flashContent = $.common.editor.flashContent, tLive = $.common.trans.live;
    var editor, $nodes;
    var send = function(el, content, ischeck, type, data) {
        var sendArgs = arguments;
        if (!scope.loginKit().isLogin) {
            var login = $.common.widget.login({
                vsrc: "app_livestream",
                appsrc: scope.appsrc
            });
            $.custEvent.add(login, "login", function() {
                send.apply(this, sendArgs);
            });
            login.showLogin();
        }
        var args = {
            content: content + (scope.refer_content ? scope.refer_content : ""),
            issync: ischeck ? 1 : 0,
            mid: data.mid,
            appkey: scope.appkey,
            language: scope.$language,
            refer: scope.refer,
            srcuid: data.srcuid
        }, tran;
        if (type == "repost") {
            args.com_content = data.forward;
        }
        tran = tLive.getTrans(type, {
            onComplete: function(param) {
                switch (param.code) {
                  case "A00006":
                    editor.showSuccess($L("#L{发布成功}"));
                    addCount(el);
                    break;
                  case "M01155":
                    editor.showError(param.msg || $L("#L{不要太贪心哦！你已经发过一次啦。}"));
                    break;
                  default:
                    editor.showError(param.msg || $L("#L{发微博失败，请稍后再试！}"));
                    break;
                }
            }
        });
        tran.request(args);
    };
    var addCount = function(el) {
        var str = el.innerHTML;
        if (/\((\d+)\)/.test(str)) {
            str = str.replace(/(\d+)/, +RegExp.$1 + 1);
        } else {
            str += "(1)";
        }
        el.innerHTML = str;
    };
    var curMid = 0, curType = "";
    var showIt = function($node, type) {
        type = type || "repost";
        var data = $node.getAttribute("data");
        data = $.queryToJson(data);
        if (data.mid === curMid && curType === type) {
            if (editor && editor.hide) {
                curMid = 0;
                curType = "";
                editor.hide(true);
                editor = null;
            }
            return;
        }
        curMid = data.mid;
        curType = type;
        var $pNode = $.E("mid" + data.mid), opts = {
            uname: data.uname,
            type: type,
            callback: function(content, ischeck) {
                send($node, content, ischeck, type, data);
            },
            forward: data.forward
        };
        if (editor && editor.hide) {
            editor.hide(true);
            editor = null;
        }
        editor = showEditor($pNode, opts);
        var pos = $.position($node);
        var size = $.core.dom.getSize($node);
        var posItem = $.position($pNode);
        var sizeItem = $.core.dom.getSize($pNode);
        var r = sizeItem.width - size.width / 2 - (pos.l - posItem.l) - 10;
        editor.setArrow(r);
    };
    return function(node) {
        var that = {}, repostLive, commentLive;
        var init = function() {
            bindDOM();
        };
        var bindListener = function() {};
        var bindDOM = function() {
            repostLive = live(node, '[node-type="repost"]', "click", function(e) {
                $.stopEvent(e);
                showIt(this, "repost");
                return false;
            });
            commentLive = live(node, '[node-type="comment"]', "click", function(e) {
                $.stopEvent(e);
                showIt(this, "comment");
                return false;
            });
        };
        var destroy = function() {
            commentLive.destroy();
            repostLive.destroy();
        };
        init();
        that.destroy = destroy;
        return that;
    };
});;


STK.register("comp.widget.live.style", function($) {
    var addStyle = function() {
        var isLoaded = false;
        if (window.attachEvent) {
            window.attachEvent("onload", function() {
                isLoaded = true;
            });
        }
        return function(rules) {
            function append() {
                var styleElement = document.createElement("style");
                styleElement.type = "text/css";
                if ($.IE) {
                    styleElement.styleSheet.cssText = rules;
                } else {
                    var frag = document.createDocumentFragment();
                    frag.appendChild(document.createTextNode(rules));
                    styleElement.appendChild(frag);
                }
                document.getElementsByTagName("head")[0].appendChild(styleElement);
            }
            if (!$.IE || isLoaded) {
                append();
            } else {
                window.attachEvent("onload", function() {
                    isLoaded = true;
                    append();
                });
            }
        };
    }();
    var href = scope.$url_params || location.href;
    var diyStyle = function() {
        var cstr = "";
        var diy = /colordiy=(\d+)/.test(href) ? RegExp.$1 : 0;
        var colors = /color=([A-Fa-f\d,]+)/.test(href) ? RegExp.$1 : "";
        if (colors && diy == 1) {
            colors = colors.split(",");
            if (colors[0]) {
                cstr += "\n .liveStream * ,\n\t\t    .liveStream .liveStream_vline,\n\t\t    .liveStream .liveStream_topborder,\n\t\t    .liveStream .liveStream_topborder p,\n\t\t    .liveStream .liveStream_followList_have{border-color:#" + colors[0] + ";}";
            }
            if (colors[1]) {
                cstr += "\n .liveStream .liveStream_topborder, .liveStream .liveStream_title,.liveStream .liveStream_main_tab li a,.liveStream .liveStream_mainFeed_list_commentInput {background:#" + colors[1] + ";}";
            }
            if (colors[2]) {
                cstr += "\n .liveStream, .liveStream .liveStream_main_tab li.current a,\n" + ".liveStream .commentInput_action .commentInput_actionFont .txt_num,\n" + ".liveStream .commentInput_actionFont{color:#" + colors[2] + ";}";
            }
            if (colors[3]) {
                cstr += "\n .liveStream a,.liveStream .liveStream_main_feedMore a,\n\t\t    .liveStream .WB_linkA a,.liveStream .WB_linkB a,.liveStream .WB_linkB,\n\t\t    .liveStream .WB_linkA{color:#" + colors[3] + ";}";
            }
            if (colors[4]) {
                cstr += "\n .liveStream .liveStream_main_height{background:#" + colors[4] + ";}\n\t\t    \t.liveStream .liveStream_main_tab li.current a {background:#" + colors[4] + ";}";
            }
            if (colors[5]) {
                cstr += "\n .liveStream .liveStream_publishbox {background:#" + colors[5] + ";}";
                cstr += "\n .liveStream .liveStream_main_header {background:#" + colors[5] + ";}";
                cstr += "\n .liveStream .liveStream_main_feedMore a{background-color:#" + colors[5] + ";}";
                cstr += "\n .liveStream .liveStream_mainFeed_list:hover, .liveStream .liveStream_mainFeed_list_focus, .liveStream .liveStream_main_allList:hover, .liveStream .liveStream_main_allList_focus, .liveStream .liveStream_follow{background:#" + colors[5] + ";}";
            }
        }
        var isborder = /border=(\d+)/.test(href) ? RegExp.$1 : 1;
        if (isborder == 0) {
            $.E("pl_live").className = "WB_widgets liveStream liveStream_noborder";
        }
        var isTitle = /titlebar=(\d+)/.test(href) ? RegExp.$1 : 1;
        if (isTitle == 0) {
            cstr += "\n .liveStream_title_top{display:none;}";
        }
        if (cstr) {
            addStyle(cstr);
        }
    };
    var diyHeight = function() {
        var height = /height=(\d+)/.test(href) ? parseInt(RegExp.$1) : 500;
        height = height > 800 ? 800 : height < 75 ? 75 : height;
        var isBorder = /border=(\d+)/.test(href) ? RegExp.$1 : 1;
        if (isBorder != 0) {
            height -= 2;
        }
        var isTitle = /titlebar=(\d+)/.test(href) ? RegExp.$1 : 1;
        if (isTitle != 0) {
            height -= 30;
        } else {
            height -= 1;
        }
        var isPub = /publish=(\d+)/.test(href) ? RegExp.$1 : 1;
        if (isPub != 0) {
            height -= 89 + 30 - 18;
        } else {
            height -= 30;
        }
        if ($.E("pl_live_fans")) {
            height -= 100;
        }
        height = Math.max(height, 0);
        $.E("live_content").style.height = height + "px";
        var errorBox = $.sizzle(".liveStream_main_errorBox");
        if (errorBox.length) {
            for (var i = 0, len = errorBox.length; i < len; i++) {
                errorBox[i].style.height = height + "px";
            }
        }
    };
    return function(node, opts) {
        var that = {};
        var init = function() {
            diyStyle();
            diyHeight();
        };
        var destroy = function() {};
        init();
        that.destroy = destroy;
        return that;
    };
});;




STK.register("comp.widget.live.loadmore", function($) {
    var nodeList2Array = function(nodeList) {
        var array = [], len = nodeList.length;
        for (var i = 0; i < len; i++) {
            array.push(nodeList[i]);
        }
        return array;
    };
    scope.page = {
        search: 2,
        list: 2
    };
    var _each = $.foreach, $LOCK = false, $L = $.kit.extra.language, href = scope.$url_params || location.href, $T = function(con, tag) {
        return con.getElementsByTagName(tag);
    }, add, addLiAnimate, addFeeds = [], LOADTIME = 3e4, URL_PATH = location.host == "widget.weibo.com" ? "" : "/widget", INFO = [ {
        url: URL_PATH + "/livestream/getnewfromsearch.php",
        oldurl: URL_PATH + "/livestream/getoldfromsearch.php",
        topic: scope.topic || -1,
        mid: scope.mid,
        delmid: "",
        type: "search",
        pic: /pic=0/.test(href) ? "0" : 1,
        start: 20
    }, {
        url: URL_PATH + "/livestream/getlistnewfromlist.php",
        oldurl: URL_PATH + "/livestream/getlistoldfromlist.php",
        sinceid: scope.sinceid,
        uid: scope.listuid,
        mid: scope.mid,
        type: "list",
        maxid: scope.maxid,
        pic: /pic=0/.test(href) ? "0" : 1,
        listid: scope.listid || -1
    } ];
    if (scope.loadtimeInterval) {
        LOADTIME = scope.loadtimeInterval;
    } else if (/ltime=(\d+)/.test(href)) {
        LOADTIME = parseInt(RegExp.$1);
    }
    if (/atalk=0/.test(href)) {
        INFO[0] = INFO[1];
    }
    scope.$spr = scope.$spr || "";
    var LoadMoreFeed = function(panel, btn, index) {
        var count = 0, load = false;
        var CONF = INFO[index];
        if (CONF.topic === -1 || CONF.listid === -1) {
            btn.style.display = "none";
            return;
        } else {
            btn.style.display = "";
        }
        $.addEvent(btn, "click", function() {
            if (load) return;
            load = true;
            btn.innerHTML = $L("#L{加载中...}");
            var param = {
                spr: scope.$spr,
                start: $.sizzle("div.liveStream_mainFeed_list", panel).length - scope.pubCount,
                uid: scope.listuid,
                language: $CONFIG.$language,
                appkey: scope.appkey,
                refer: scope.refer,
                dup: scope.$dup,
                antispan: scope.$antispam,
                isOutTopicSearch: scope.$isOutTopicSearch,
                dpc: 1
            };
            "maxid topic mid listid pic sinceid uid".replace(/\S+/g, function(a) {
                if (CONF[a]) {
                    param[a] = CONF[a];
                }
            });
            if (typeof CONF.delmid != "undefined") {
                param.delmid = scope.delMids.join(",");
            }
            param.page = scope.page[CONF.type];
            $.ajax({
                url: CONF.oldurl,
                args: param,
                onComplete: function(json) {
                    if (json.code == "A00008") {
                        btn.innerHTML = $L("#L{没有更多微博了}");
                        setTimeout(function() {
                            $.removeNode(btn);
                        }, 3e3);
                    } else if (json.code === "A00006") {
                        load = false;
                        if (json.html) {
                            var $t = $.C("DIV");
                            $t.innerHTML = json.html;
                            var items = $.sizzle("div.liveStream_mainFeed_list", $t);
                            panel.insertBefore($t, btn.parentNode);
                        }
                        if (json.maxid) {
                            CONF.maxid = json.maxid;
                        }
                        btn.innerHTML = $L("#L{点击查看更多}");
                        if (count >= 2) {
                            $.removeNode(btn);
                        }
                        param.page = scope.page[CONF.type]++;
                        count++;
                    } else {
                        btn.innerHTML = $L("#L{加载出错，点击重试}");
                    }
                },
                onFail: function(json) {
                    load = false;
                    btn.innerHTML = $L("#L{加载出错，点击重试}");
                }
            });
        });
    };
    var autoLoadFeed = function(panel, index) {
        var conf = INFO[index];
        if (conf.topic === -1 || conf.listid === -1) {
            return;
        }
        addFeeds[index] = [];
        var load = function() {
            var conf = INFO[index];
            var param = {
                spr: scope.$spr,
                dpc: 1,
                appkey: scope.appkey,
                refer: scope.refer,
                language: $CONFIG.$language
            };
            "sinceid topic mid uid pic listid maxid".replace(/\S+/g, function(a) {
                if (conf[a]) {
                    param[a] = conf[a];
                }
            });
            if (typeof conf.delmid != "undefined") {
                param.delmid = scope.delMids.join(",");
            }
            if (conf.uid) {
                param.start = $.sizzle("div.liveStream_mainFeed_list", panel).length - scope.pubCount;
            }
            param["url_random"] = 0;
            var succ = function(json) {
                "sinceid mid".replace(/\S+/g, function(a) {
                    if (json[a]) {
                        conf[a] = json[a];
                    }
                });
                if (json.delmid) {
                    var temp = scope.delMids;
                    scope.delMids = [];
                    for (var len = temp.length, i = 0; i < len; i++) {
                        if (-1 !== $.core.arr.indexOf(temp[len], json.delmid)) {
                            scope.delMids.push(temp[len]);
                        }
                    }
                }
                if (json.html) {
                    var flag = document.createDocumentFragment();
                    var ul = $.C("DIV");
                    ul.innerHTML = json.html;
                    setTimeout(function() {
                        var $lists = $.sizzle("div.liveStream_mainFeed_list", ul);
                        addFeeds[index] = nodeList2Array($lists);
                        add();
                    }, 0);
                } else {
                    add();
                }
            };
            var err = function(json) {
                add();
            };
            $.ajax({
                url: conf.url,
                args: param,
                onComplete: succ,
                onFail: err
            });
        };
        var animate = function() {
            var feed = addFeeds[index].pop();
            if (panel.style.display === "none") {
                return;
            }
            panel.insertBefore(feed, panel.firstChild);
            $.comp.widget.live.slidedown(feed);
            setTimeout(function() {
                add();
            }, 2e3);
        };
        var add = function() {
            if (panel.style.display == "none" || $LOCK) {
                setTimeout(function() {
                    add();
                }, 30);
                return;
            }
            if (addFeeds[index].length === 0) {
                return;
            }
            animate();
        };
        setTimeout(function() {
            add();
        }, 3e3);
    };
    return function(node, opts) {
        var that = {};
        var init = function() {
            if (!$.E("tabs") || !$.E("live_content")) return;
            var panels = $.sizzle('[node-type="box"]', $.E("live_content"));
            var moreBtns = $.sizzle("div.liveStream_main_feedMore > a", $.E("live_content"));
            panels = [ panels[0], panels[1] ];
            setTimeout(function() {
                _each(panels, function(panel, i) {
                    if (!panel) return;
                    autoLoadFeed(panel, i);
                    if (moreBtns[i]) {
                        LoadMoreFeed(panel, moreBtns[i], i);
                    }
                });
            }, 0);
        };
        var bindDOM = function() {};
        var destroy = function() {};
        init();
        that.destroy = destroy;
        return that;
    };
});;




STK.register("common.diy.slider", function($) {
    var addEvent = $.addEvent, getStyle = $.core.dom.getStyle;
    setStyle = $.core.dom.setStyle;
    return function(nodes, opts) {
        if (!nodes) {
            throw "it need node for slider";
        }
        var that = {};
        var slider = function() {
            var defaults = {
                step: 1,
                speed: 1e3,
                show: 3,
                auto: true,
                pause: 2e3,
                dir: "left",
                vertical: false,
                continuous: true,
                controlsFade: true
            };
            var options = $.parseParam(defaults, opts);
            var _this = {};
            _this.prevBtn = nodes.prev;
            _this.nextBtn = nodes.next;
            _this.slider = nodes.slider;
            _this.btnlist = [];
            var ul = _this.slider.getElementsByTagName("ul")[0];
            var li = ul.getElementsByTagName("li");
            var len = li.length;
            var width = li[0].offsetWidth + parseInt(getStyle(li[0], "marginLeft")) + parseInt(getStyle(li[0], "marginRight"));
            var height = li[0].offsetHeight + parseInt(getStyle(li[0], "marginTop")) + parseInt(getStyle(li[0], "marginBottom"));
            var total = Math.floor((len - options.show) / options.step);
            var index = 0;
            var goon = true;
            setStyle(_this.slider, "overflow", "hidden");
            setStyle(ul, "width", len * width + "px");
            if (!options.vertical) {
                for (var i = 0; i < len; i++) {
                    setStyle(li[i], "float", "left");
                }
            }
            addEvent(_this.prevBtn, "click", function() {
                scroll("prev", true);
            });
            addEvent(_this.nextBtn, "click", function() {
                scroll("next", true);
            });
            var extraFun = {
                set: function(no) {
                    if (_this.btnlist.length === 0) return;
                    for (var i = 0; i < _this.btnlist.length; i++) {
                        $.removeClassName(_this.btnlist[i], "current");
                    }
                    $.addClassName(_this.btnlist[no], "current");
                },
                add: function() {
                    var page = Math.floor(len / options.show);
                    for (var i = 0; i < page; i++) {
                        var a = $.C("a");
                        a.href = "javascript:;";
                        a.innerHTML = parseInt(i + 1);
                        a.onclick = function(no) {
                            return function() {
                                extraFun.scroll(no);
                            };
                        }(i);
                    }
                },
                scroll: function(no) {
                    var dir = "next";
                    if (no === index) {
                        return;
                    } else if (no < index) {
                        index = no + 1;
                        dir = "prev";
                    } else {
                        index = no - 1;
                    }
                    scroll(dir, false);
                }
            };
            if (len / options.show >= 2) {} else {
                setStyle(_this.prevBtn, "display", "none");
                setStyle(_this.nextBtn, "display", "none");
            }
            function scroll(dir, clicked) {
                var curr = index;
                switch (dir) {
                  case "next":
                    index = curr >= total ? options.continuous ? 0 : total : index + 1;
                    break;
                  case "prev":
                    index = index <= 0 ? options.continuous ? total : 0 : index - 1;
                    break;
                  case "first":
                    index = 0;
                    break;
                  case "last":
                    index = total;
                    break;
                  default:
                    break;
                }
                var ani = $.core.ani.tween(ul);
                var position;
                if (!options.vertical) {
                    position = index * width * options.step * -1;
                    ani.play({
                        marginLeft: position
                    });
                } else {
                    position = index * height * -1;
                    ani.play({
                        marginTop: position
                    });
                }
                if (options.controlsFade) {
                    if (index == 0) {
                        goon = false;
                        $.removeClassName(_this.prevBtn, "page_ok");
                        $.addClassName(_this.nextBtn, "page_ok");
                    } else if (index == total) {
                        goon = false;
                        $.addClassName(_this.prevBtn, "page_ok");
                        $.removeClassName(_this.nextBtn, "page_ok");
                    } else {
                        goon = true;
                        $.addClassName(_this.prevBtn, "page_ok");
                        $.addClassName(_this.nextBtn, "page_ok");
                    }
                }
                extraFun.set(index);
                if (clicked || !goon) clearTimeout(timer);
                if (options.auto && (goon || options.continuous)) {
                    timer = setTimeout(function() {
                        scroll(dir, false);
                    }, options.speed + options.pause);
                }
            }
            var timer;
            if (options.auto) {
                timer = setTimeout(function() {
                    scroll("next", false);
                }, options.pause);
            }
            if (options.controlsFade) {
                $.removeClassName(_this.prevBtn, "page_ok");
                $.addClassName(_this.nextBtn, "page_ok");
                extraFun.set(0);
            }
        };
        var init = function() {
            slider();
        };
        init();
        that.slider = slider;
        return that;
    };
});;












STK.register("module.layer", function($) {
    var getSize = function(box) {
        var ret = {};
        if (box.style.display == "none") {
            box.style.visibility = "hidden";
            box.style.display = "";
            ret.w = box.offsetWidth;
            ret.h = box.offsetHeight;
            box.style.display = "none";
            box.style.visibility = "visible";
        } else {
            ret.w = box.offsetWidth;
            ret.h = box.offsetHeight;
        }
        return ret;
    };
    var getPosition = function(el, key) {
        key = key || "topleft";
        var posi = null;
        if (el.style.display == "none") {
            el.style.visibility = "hidden";
            el.style.display = "";
            posi = $.core.dom.position(el);
            el.style.display = "none";
            el.style.visibility = "visible";
        } else {
            posi = $.core.dom.position(el);
        }
        if (key !== "topleft") {
            var size = getSize(el);
            if (key === "topright") {
                posi["l"] = posi["l"] + size["w"];
            } else if (key === "bottomleft") {
                posi["t"] = posi["t"] + size["h"];
            } else if (key === "bottomright") {
                posi["l"] = posi["l"] + size["w"];
                posi["t"] = posi["t"] + size["h"];
            }
        }
        return posi;
    };
    return function(template) {
        var dom = $.core.dom.builder(template);
        var outer = dom.list["outer"][0], inner = dom.list["inner"][0];
        var uniqueID = $.core.dom.uniqueID(outer);
        var that = {};
        var custKey = $.core.evt.custEvent.define(that, "show");
        $.core.evt.custEvent.define(custKey, "hide");
        var sizeCache = null;
        that.show = function() {
            outer.style.display = "";
            $.core.evt.custEvent.fire(custKey, "show");
            return that;
        };
        that.hide = function() {
            outer.style.display = "none";
            $.custEvent.fire(custKey, "hide");
            return that;
        };
        that.getPosition = function(key) {
            return getPosition(outer, key);
        };
        that.getSize = function(isFlash) {
            if (isFlash || !sizeCache) {
                sizeCache = getSize.apply(that, [ outer ]);
            }
            return sizeCache;
        };
        that.html = function(html) {
            if (html !== undefined) {
                inner.innerHTML = html;
            }
            return inner.innerHTML;
        };
        that.text = function(str) {
            if (text !== undefined) {
                inner.innerHTML = $.core.str.encodeHTML(str);
            }
            return $.core.str.decodeHTML(inner.innerHTML);
        };
        that.appendChild = function(node) {
            inner.appendChild(node);
            return that;
        };
        that.getUniqueID = function() {
            return uniqueID;
        };
        that.getOuter = function() {
            return outer;
        };
        that.getInner = function() {
            return inner;
        };
        that.getParentNode = function() {
            return outer.parentNode;
        };
        that.getDomList = function() {
            return dom.list;
        };
        that.getDomListByKey = function(key) {
            return dom.list[key];
        };
        that.getDom = function(key, index) {
            if (!dom.list[key]) {
                return false;
            }
            return dom.list[key][index || 0];
        };
        that.getCascadeDom = function(key, index) {
            if (!dom.list[key]) {
                return false;
            }
            return $.core.dom.cascadeNode(dom.list[key][index || 0]);
        };
        return that;
    };
});;


STK.register("ui.tipPrototype", function($) {
    var zIndex = 10003;
    return function(spec) {
        var conf, tipPrototype, box, content, tipWH;
        var template = '<div node-type="outer" class="WB_widgets W_layer" style="position: absolute; display:none;" >' + '<div node-type="inner" class="bg"></div>' + "</div>";
        conf = $.parseParam({
            direct: "up",
            showCallback: $.core.func.empty,
            hideCallback: $.core.func.empty
        }, spec);
        tipPrototype = $.module.layer(template, conf);
        box = tipPrototype.getOuter();
        content = tipPrototype.getInner();
        tipPrototype.setTipWH = function() {
            tipWH = this.getSize(true);
            this.tipWidth = tipWH.w;
            this.tipHeight = tipWH.h;
            return this;
        };
        tipPrototype.setTipWH();
        tipPrototype.setContent = function(cont) {
            if (typeof cont == "string") {
                content.innerHTML = cont;
            } else {
                content.appendChild(cont);
            }
            this.setTipWH();
            return this;
        };
        tipPrototype.setLayerXY = function(pNode) {
            if (!pNode) {
                throw "ui.tipPrototype need pNode as first parameter to set tip position";
            }
            var pNodePosition = STK.core.dom.position(pNode);
            var pNodePositionLeft = pNodePosition.l;
            var pNodeWidth = pNode.offsetWidth;
            var pNodeHeight = pNode.offsetHeight;
            var tipPositionLeft = Math.min(Math.max(pNodePositionLeft + (pNodeWidth - this.tipWidth) / 2, $.scrollPos().left), $.scrollPos().left + STK.winSize().width - this.tipWidth);
            var tipPositionTop = pNodePosition.t;
            if (conf.direct === "down") {
                tipPositionTop += pNodeHeight;
            }
            var arr = [ ";" ];
            arr.push("z-index:", zIndex++, ";");
            arr.push("width:", this.tipWidth, "px;");
            arr.push("height:", this.tipHeight, "px;");
            arr.push("top:", tipPositionTop, "px;");
            arr.push("left:", tipPositionLeft, "px;");
            box.style.cssText += arr.join("");
        };
        tipPrototype.aniShow = function() {
            var outer = this.getOuter();
            outer.style.height = "0px";
            outer.style.display = "";
            var ani = $.core.ani.tween(outer, {
                end: conf.showCallback,
                duration: 250,
                animationType: "easeoutcubic"
            });
            if (conf.direct === "down") {
                ani.play({
                    height: this.tipHeight
                }, {
                    staticStyle: "overflow:hidden;position:absolute;"
                });
            } else {
                var top = parseInt(outer.style.top, 10) - this.tipHeight;
                ani.play({
                    height: this.tipHeight,
                    top: Math.max(top, $.scrollPos().top)
                }, {
                    staticStyle: "overflow:hidden;position:absolute;"
                });
            }
        };
        tipPrototype.anihide = function() {
            var outer = this.getOuter();
            var _this = this;
            var ani = $.core.ani.tween(outer, {
                end: function() {
                    outer.style.display = "none";
                    outer.style.height = _this.tipHeight + "px";
                    conf.hideCallback();
                },
                duration: 300,
                animationType: "easeoutcubic"
            });
            if (conf.direct === "down") {
                ani.play({
                    height: 0
                }, {
                    staticStyle: "overflow:hidden;position:absolute;"
                });
            } else {
                var top = parseInt(outer.style.top, 10) + this.tipHeight;
                ani.play({
                    height: 0,
                    top: top
                }, {
                    staticStyle: "overflow:hidden;position:absolute;"
                });
            }
        };
        document.body.appendChild(box);
        tipPrototype.destroy = function() {
            document.body.removeChild(box);
            tipPrototype = null;
        };
        return tipPrototype;
    };
});;


STK.register("ui.tipAlert", function($) {
    var $easyT = $.core.util.easyTemplate;
    return function(spec) {
        spec = $.parseParam({
            direct: "up",
            className: "WB_widgets W_layer",
            showCallback: $.core.func.empty,
            hideCallback: $.core.func.empty,
            template: '<#et temp data><table cellspacing="0" cellpadding="0" border="0">' + "<tbody><tr><td>" + '<div node-type="msgDiv" class="content layer_mini_info">' + '<p class="clearfix alt_text"><span class="tip_icon WB_tipS_${data.type}"></span>${data.msg}&nbsp; &nbsp; &nbsp; </p>' + "</div>" + "</td></tr></tbody>" + "</table></#et>",
            type: "ok",
            msg: ""
        }, spec);
        var tipAlert = $.ui.tipPrototype(spec);
        var content = tipAlert.getInner();
        var outer = tipAlert.getOuter();
        outer.className = spec.className;
        content.className = "bg";
        var template = spec.template;
        var dom = $.builder($easyT(template, {
            type: spec.type,
            msg: spec.msg
        }).toString());
        tipAlert.setContent(dom.box);
        var tipPrototypeDestroy = tipAlert.destroy;
        tipAlert.destroy = function() {
            tipPrototypeDestroy();
            tipAlert = null;
        };
        return tipAlert;
    };
});;


STK.register("common.widget.reg", function($) {
    var protocol = window.location.protocol == "https:" ? "https:" : "http:";
    var $L = $.kit.extra.language;
    var tip = $.ui.tipAlert({
        className: "WB_tips_top",
        showCallback: function() {
            var box = tip.getOuter();
            box.style.height = "";
            box = null;
        },
        template: '<#et temp data><div class="tips_inner">' + '<span class="WB_tipS_warn"></span><span class="WB_icon_txt">' + $L("#L{您的帐号尚未开通微博，}") + "<a href=" + protocol + '"//weibo.com/signup/full_info.php?appsrc=6cm7D0&backurl=' + encodeURIComponent(document.URL) + '&showlogo=0&vsrc=weiboshow&from=zw" target="_blank">' + $L("#L{立即开通}") + "</a></span>" + "</#et>"
    });
    return function(node) {
        if (!$.isNode(node)) {
            throw "[common.widget.reg] need node as first parameter";
        }
        tip.setLayerXY(node);
        tip.aniShow();
        return tip;
    };
});;


STK.register("common.widget.addFollow", function($) {
    var $L = $.kit.extra.language;
    var $queryToJson = $.core.json.queryToJson;
    var emptyFn = function() {}, args = {
        uid: scope.loginKit().uid,
        url: "",
        fuid: "",
        appsrc: "",
        vsrc: "app_weiboshow",
        success: emptyFn,
        fail: emptyFn,
        btnTemp: ""
    };
    var $followBtn;
    var doPost = function(opts) {
        if (opts.fuid === opts.uid) {
            $followBtn.parentNode.innerHTML = $L('<span class="WB_btnC"><span><em class="WB_btnicn_ok"></em><em>#L{你自己}</em></span></span>');
            return "yourself";
        }
        if (!opts.url) {
            opts.url = "/widget/weiboshow/aj_attention.php";
            if (/weibo.com/.test(location.host)) {
                opts.url = "/weiboshow/aj_attention.php";
            }
        }
        var btnTemp = opts.btnTemp || '<span class="WB_btnC"><span><em class="WB_btnicn_ok"></em><em>#L{已关注}</em></span></span>';
        $.ajax({
            method: "post",
            url: opts.url,
            args: {
                wsrc: $CONFIG.wsrc || "app_weibo_show",
                uid: opts.uid,
                fuid: opts.fuid
            },
            onComplete: function(json) {
                switch (json.code) {
                  case "A00006":
                    break;
                  case "A10007":
                    break;
                  case -1:
                    $.common.widget.reg($followBtn);
                    break;
                  case -2:
                    var login = $.common.widget.login();
                    $.custEvent.add(login, "login", function() {
                        opts.uid = scope.loginKit().uid;
                        doPost(opts);
                    });
                    login.showLogin();
                    break;
                  case -3:
                    break;
                }
                if ((json.code == "A00006" || json.code == "A10007") && $followBtn) {
                    $followBtn.parentNode.innerHTML = $L(btnTemp);
                }
                typeof opts.success === "function" && opts.success(json);
            },
            onFail: function(j) {
                typeof opts.fail === "function" && opts.fail(j);
            }
        });
    };
    var newDoPost = function(node) {
        var nodeData = node.getAttribute("action-data");
        if (!nodeData) {
            return;
        }
        var nodeJson = $queryToJson(nodeData);
        nodeJson.uid && window.open("http://www.weibo.com/u/" + nodeJson.uid + "?refer_flag=2725420000_weiboxiu");
    };
    return function(node, opts) {
        if (!node) {
            throw "[common.widget.addFollow] need node as parameter";
            return;
        }
        $followBtn = node;
        var addFollow = function() {
            if (parent != self && parent != parent.parent) {
                return;
            }
            if (!scope.$isLogin()) {
                var login = $.common.widget.login();
                $.custEvent.add(login, "login", function() {
                    opts.uid = scope.loginKit().uid;
                    newDoPost(node);
                });
                login.showLogin();
                return;
            }
            newDoPost(node);
        };
        var that = {};
        var init = function() {
            opts = $.parseParam(args, opts);
            if (!opts.fuid) {
                opts.fuid = node.getAttribute("uid");
            }
            bindDOM();
        };
        var bindDOM = function() {
            $.addEvent(node, "click", addFollow);
        };
        var destroy = function() {
            $.removeEvent(node, "click", addFollow);
        };
        that.destroy = destroy;
        init();
        return that;
    };
});;




STK.register("comp.widget.live.follow", function($) {
    var tLive = $.common.trans.live;
    var $prevBtn, $nextBtn, $fansList, $fansLi, eWidth, allWidth, ani;
    var getFollows = function() {
        if (scope.uids.length > 0) {
            var t = tLive.getTrans("relations", {
                onComplete: function(json) {
                    var len = json.uid.length;
                    scope.pubCount++;
                    if (json.code === "A00006" && len > 0) {
                        for (var i = 0; i < len; i++) {
                            var dom = $.E("uid" + json.uid[i]);
                            followed(dom);
                        }
                    }
                    bindDOM();
                }
            });
            t.request({
                uids: scope.uids.join(",")
            });
        }
    };
    var prev = function(e) {
        var width = parseInt($.core.dom.getStyle($fansList, "marginLeft"));
        ani.play({
            marginLeft: width - eWidth
        });
        return false;
    }, next = function(e) {
        var width = $.core.dom.getStyle($fansList, "marginLeft");
        ani.play({
            marginLeft: width + eWidth
        });
        return false;
    };
    var followed = function($node) {
        if (!$node) {
            return;
        }
        var $span = $.sizzle("span.liveStream_followList_action", $node)[0];
        if ($span) {
            var $nSpan = document.createElement("span");
            $nSpan.className = "liveStream_followList_have";
            $nSpan.innerHTML = "<em></em";
            $span.parentNode.replaceChild($nSpan, $span);
            $nSpan = null;
            $span = null;
        }
    };
    return function(node) {
        var that = {};
        var init = function() {
            if (!node) {
                return;
            }
            parseDOM();
            getFollows();
            bindDOM();
        };
        var parseDOM = function() {
            $prevBtn = $.sizzle('[node-type="prevBtn"]', node)[0];
            $nextBtn = $.sizzle('[node-type="nextBtn"]', node)[0];
            $fansList = $.sizzle('[node-type="fansList"]', node)[0];
            var $sider = $.sizzle('[node-type="slider"]', node)[0];
            $fansLi = $.sizzle("li", $fansList);
            if ($fansLi.length === 0) {
                $prevBtn.style.display = "none";
                $nextBtn.style.display = "none";
                return;
            }
            $.common.diy.slider({
                slider: $sider,
                prev: $prevBtn,
                next: $nextBtn
            }, {
                step: 1,
                speed: 1e3,
                show: 7,
                auto: false,
                pause: 2e3,
                dir: "left",
                vertical: false,
                continuous: false,
                controlsFade: true
            });
        };
        var doFollow = function($followBtn, uid) {
            if (parent != self && parent != parent.parent) {
                return;
            }
            if (!scope.$isLogin()) {
                var login = $.common.widget.login();
                var args = arguments;
                $.custEvent.add(login, "login", function() {
                    doFollow.apply(this, args);
                });
                login.showLogin();
                return;
            }
            var parms = {
                wsrc: $CONFIG.wsrc || "app_live_stream",
                uid: uid,
                login: scope.postLogin
            }, url = "aj_attention.php";
            if (scope.refer) {
                parms.refer = scope.refer;
            }
            var tran = tLive.getTrans("addFollow", {
                onComplete: function(json) {
                    if (json.code === "A00006") {
                        followed($followBtn);
                    } else if (json.msg) {
                        alert(json.msg);
                    }
                }
            });
            tran.request(parms);
        };
        var bindDOM = function() {
            var $lks = $.sizzle('[node-type="fansList"] span.liveStream_followList_action', node);
            var len = $lks.length;
            while (len--) {
                $.addEvent($lks[len], "click", function(i) {
                    return function(e) {
                        $.stopEvent();
                        var $p = $lks[i].parentNode.parentNode;
                        var uid = $p.getAttribute("uid");
                        doFollow($p, uid);
                    };
                }(len));
            }
        };
        var destroy = function() {};
        init();
        that.destroy = destroy;
        return that;
    };
});;




STK.register("common.diy.hover", function($) {
    return function(el, hoverFun, outerFun) {
        var cls = el.className;
        var css = el.style.cssText;
        $.addEvent(el, "mouseover", function() {
            hoverFun(el);
        });
        if (!outerFun || typeof outerFun != "function") {
            $.addEvent(el, "mouseout", function() {
                el.className = cls;
                el.style.cssText = css;
            });
        } else {
            $.addEvent(el, "mouseout", function() {
                outerFun(el);
            });
        }
    };
});;


STK.register("comp.widget.live.slidedown", function($) {
    var hover = $.common.diy.hover;
    return function(node, callback) {
        if (!$.isNode(node)) {
            node = $.E(node);
        }
        var height = node.offsetHeight;
        node.style.height = "0";
        node.style.overflow = "hidden";
        node.style.display = "";
        var end = function() {
            node.style.overflow = "";
            node.style.height = "";
            a.destroy();
            typeof callback === "function" && callback();
        };
        var a = STK.core.ani.tween(node, {
            end: end
        });
        a.play({
            height: height
        });
        hover(node, function(el) {
            el.className = "liveStream_mainFeed_list liveStream_mainFeed_list_focus clearfix";
        }, function(el) {
            el.className = "liveStream_mainFeed_list clearfix";
        });
    };
});;


if (typeof scope === "undefined") {
    var scope = {};
}

if (!scope.refer_content) {
    scope.refer_content = "";
}

scope.pubCount = 0;

STK.register("comp.widget.live.init", function($) {
    var addEvent = $.addEvent, getEvent = $.getEvent, trim = $.trim, reomveEvent = $.reomveEvent, sizzle = $.sizzle, ajax = $.ajax, fireEvent = $.fireEvent, stopEvent = $.stopEvent, $L = $.kit.extra.language, getLength = $.common.editor.getLength, flashContent = $.common.editor.flashContent, tLive = $.common.trans.live, maxLen = 2e3, $editor, lock;
    scope.delMids = [];
    var editorDefault = function() {
        if (!$editor) {
            return;
        }
        $editor.value = "#" + decodeURIComponent(scope.puptopic) + "#";
        $.fireEvent($editor, "keyup");
    };
    function removeNext(node) {
        var tip = $.core.dom.next(node);
        if (tip) {
            $.removeNode(tip);
        }
    }
    var showSendTip = function(div) {
        div = div.box;
        removeNext($editor);
        $.insertAfter(div, $editor);
        setTimeout(function() {
            removeNext($editor);
        }, 2e3);
    }, showSendSuccess = function() {
        var dom = $.builder($L('<p class="commentInput_state"><span class="WB_tipS_ok commentInput_state_icon"></span>#L{发布成功}</p>'));
        showSendTip(dom);
    }, showSendError = function(msg) {
        msg = msg || "#L{发表微博失败}";
        var dom = $.builder($L('<p class="commentInput_state"><span class="WB_tipS_err commentInput_state_icon"></span>' + msg + '<a href="###" node-type="backBtn">#L{返回}</a></p>'));
        $.addEvent(dom.list.backBtn, "click", function() {
            dom.style.display = "none";
            return false;
        });
        showSendTip(dom);
    };
    var sendWB = function() {
        var value = $.trim($editor.value), len = getLength(value);
        if (len > maxLen || len == 0) {
            flashContent($editor);
            return;
        }
        if (!scope.loginKit().isLogin) {
            var login = $.common.widget.login({
                vsrc: "app_livestream",
                appsrc: scope.appsrc
            });
            $.custEvent.add(login, "login", function() {
                sendWB();
            });
            login.showLogin();
        }
        if (lock == true) {
            return;
        }
        lock = true;
        value += scope.refer_content;
        var data = {
            appkey: scope.appkey,
            refer: scope.refer,
            language: scope.$language,
            url_param: scope.url_param,
            content: encodeURIComponent(value)
        };
        tran = tLive.getTrans("addmblog", {
            onComplete: function(json) {
                if (json.code === "A00006") {
                    if (json.html) {
                        var $ul = document.createElement("DIV");
                        $ul.innerHTML = json.html;
                        var feed = $.sizzle(".liveStream_mainFeed_list", $ul)[0];
                        var $p = $.sizzle('[node-type="box"]', $.E("live_content"))[0];
                        $p.insertBefore(feed, $p.firstChild);
                        $.comp.widget.live.slidedown(feed);
                    }
                    if (json.delmid) {
                        scope.delMids.push(json.delmid);
                    }
                    editorDefault();
                    showSendSuccess();
                } else {
                    showSendError(json.msg);
                }
                lock = null;
            },
            onError: function() {
                lock = null;
            },
            onFail: function() {
                lock = null;
            }
        });
        tran.request(data);
        return false;
    };
    var $picBox = $.C("div");
    $picBox.className = " WB_widgets WB_widgets_layer_picshow";
    var showPic = function(obj) {
        var imgEle = obj.el;
        var src = obj.data.src;
        var img = new Image;
        img.onload = function() {
            var boxWidth = $.E("live_content").offsetWidth;
            var pos = $.position(imgEle);
            var left = pos.l;
            if (parseInt(left + img.width) > boxWidth) {
                left = boxWidth - img.width - 2;
            }
            $picBox.style.left = left + "px";
            $picBox.style.top = pos.t + imgEle.offsetHeight + 2 + "px";
            $picBox.style.display = "block";
        };
        img.src = src;
        $picBox.appendChild(img);
    }, hidePic = function() {
        $picBox.style.display = "none";
        $picBox.innerHTML = "";
    };
    return function(node, opts) {
        var that = {}, $repost_comm;
        var logInit = function() {
            var imgPV = new Image;
            var url = "//rs.sinajs.cn/tmp.gif?";
            url += "id=live&action=pv";
            url += "&uid=" + ($CONFIG.$uid || 0);
            url += "&url=" + encodeURIComponent(document.referrer);
            url += "&r=" + (new Date).valueOf();
            imgPV.src = url;
        };
        var init = function() {
            bindDOM();
            node.appendChild($picBox);
            $repost_comm = $.comp.widget.live.repost_comm($.E("live_content"));
            $.comp.widget.live.follow($.E("pl_live_fans"));
            $.comp.widget.live.style();
            maxLen -= getLength(scope.refer_content == "" ? "" : " " + scope.refer_content);
            $.comp.widget.live.loadmore();
            logInit();
        };
        var bindDOM = function() {
            $editor = $.sizzle('[node-type="editor"]', $.E("publisher"))[0];
            editorDefault();
            $.E("publisher") && $.common.editor.simpleEditorNew($.E("publisher"), {
                limit: maxLen,
                warnClassName: "txt_num err_num",
                className: "txt_num"
            });
            var $contents = $.sizzle('div[node-type="box"]', node);
            var $tabs = $.E("tabs"), $lis = $.sizzle("li", $tabs);
            if ($contents.length > 1 && $lis.length > 1) {
                $.module.tabs($tabs, {
                    tabNode: "li",
                    boxNode: $contents,
                    callback: function() {}
                });
            }
            $.addEvent($.E("publisherBtn"), "click", sendWB);
            $.core.evt.hotKey.add($editor, "ctrl+Enter", sendWB);
            var delegateEvt = $.delegatedEvent(node);
            delegateEvt.add("showpic", "mouseover", showPic);
            delegateEvt.add("showpic", "mouseout", hidePic);
        };
        var destroy = function() {
            $.removeEvent($.E("publisherBtn"), "click", sendWB);
            $.core.evt.hotKey.remove($editor, "ctrl+Enter", sendWB);
            $repost_comm.destroy();
        };
        init();
        that.destroy = destroy;
        return that;
    };
});;


STK.pageletM.register("pl.widget.live", function($) {
    try {
        var opts = {};
        var node = $.E("pl_live");
        var that = $.comp.widget.live.init(node, opts);
        return that;
    } catch (e) {}
});;


STK.pageletM.start();;
